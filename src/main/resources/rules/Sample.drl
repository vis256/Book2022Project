package com.sample;
 
import com.sample.DroolsTest.*;
import org.kie.api.runtime.KieRuntime
import java.util.ArrayList
import java.util.List
import java.util.Arrays;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

global JFrame frame
global javax.swing.JTextArea textArea

declare Pytanie
	trescPytania : String
	odpowiedz : String
end

rule "Which type of book are you looking for?"
	when
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("Fantasy");
		odp.add("Sci-Fi"); 
		odp.add("A little bit of both");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Which type of book are you looking for?", odp );
		insert(p);
end

rule "Up for a fairy tale?"
	when
		Pytanie(trescPytania == "Which type of book are you looking for?", odpowiedz == "Fantasy")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("Yes, why mess with a classic formula");
		odp.add("No, something more gritty");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Up for a fairy tale?", odp );
		insert(p);
end

rule "Fairy Tale Fork : Yes"
	when
		Pytanie(trescPytania == "Up for a fairy tale?", odpowiedz == "Yes, why mess with a classic formula")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("A gritty, existential fable");
		odp.add("Reverse Rumpelstiltskin");
		odp.add("Goblin Politics");
		odp.add("A short story");
		Pytanie p = zapytaj(frame, kcontext.getKieRuntime(), "Wybierz:", odp );
		insert(p);
end

rule "Short Story Fork"
	when
		Pytanie(odpowiedz == "A short story")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("Based in Asian folklore");
		odp.add("Provocative yet surreal");
		Pytanie p = zapytaj(frame, kcontext.getKieRuntime(), "Wybierz:", odp );
		insert(p);
end
	
rule "Recommend: The Paper Menagere And Other Stories"
	when
		Pytanie(odpowiedz == "Based in Asian folklore")
	then
		recommend( frame, kcontext.getKieRuntime(),"The Paper Menagerie And Other Stories by Ken Liu" );
end

rule "Recommend: Her body and other parties"
	when
		Pytanie(odpowiedz == "Provocative yet surreal")
	then
		recommend( frame, kcontext.getKieRuntime(), "Her Body and Other Parties: Stories by Carmen Maria Machado" );
end

rule "Recommend: The Goblin Emperor"
	when
		Pytanie(odpowiedz == "Goblin Politics")
	then
		recommend( frame, kcontext.getKieRuntime(),"The Goblin Emperor (The Goblin Emperor, #1) by Katherine Addison" );
end

rule "Recommend: Spinning Silver"
	when
		Pytanie(odpowiedz == "Reverse Rumpelstiltskin")
	then
		recommend( frame, kcontext.getKieRuntime(),"Spinning Silver by Naomi Novik" );
end

rule "Recommend: The buried Giant"
	when
		Pytanie(odpowiedz == "A gritty, existential fable")
	then
		recommend( frame, kcontext.getKieRuntime(),"The Buried Giant by Kazuo Ishiguro" );
end

rule "Fairy Tale Fork : No"
	when
		Pytanie(trescPytania == "Up for a fairy tale?", odpowiedz == "No, something more gritty")
	then
		ArrayList<String> odp = new ArrayList<String>();
        odp.add("Yes, bring on the new world");
        odp.add("No, not that gritty");
        Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Society on the brink of change?", odp );
        insert(p);
end

rule "Fairy Tale Fork : New World Fork"
	when
		Pytanie(trescPytania == "Society on the brink of change?", odpowiedz == "Yes, bring on the new world")
	then
		ArrayList<String> odp = new ArrayList<String>();
        odp.add("Once in an age events");
        odp.add("Magical Revolution");
        Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"What's changing the land?", odp );
        insert(p);
end

rule "New World Fork : Age events"
	when
		Pytanie(trescPytania == "What's changing the land?", odpowiedz == "Once in an age events")
	then
		ArrayList<String> odp = new ArrayList<String>();
        odp.add("Celestial events in unbalanced world");
        odp.add("Geological & caste upheaval");
        Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Once in an age events", odp );
        insert(p);
end

rule "Recommend: Black Sun"
	when
		Pytanie(odpowiedz == "Celestial events in unbalanced world")
	then
		recommend( frame, kcontext.getKieRuntime(),"Black Sun (Between Earth and Sky, #1) by Rebecca Roanhorse" );
end

rule "Recommend: The Fifth Season"
	when
		Pytanie(odpowiedz == "Geological & caste upheaval")
	then
		recommend( frame, kcontext.getKieRuntime(),"The Fifth Season (The Broken Earth, #1) by N.K. Jemisin" );
end

rule "New World Fork : Magical Revolution"
	when
		Pytanie(trescPytania == "What's changing the land?", odpowiedz == "Magical Revolution")
	then
		ArrayList<String> odp = new ArrayList<String>();
        odp.add("A monopoly over magical jade");
        odp.add("New magic and ghostly intrigue");
        odp.add("Magic giving way to machines");
        Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Magical Revolution", odp );
        insert(p);
end

rule "Recommend: Jade City"
	when
		Pytanie(odpowiedz == "A monopoly over magical jade")
	then
		recommend( frame, kcontext.getKieRuntime(),"Jade City (The Green Bone Saga, #1) by Fonda Lee" );
end
rule "Recommend: A Stranger in Olondria"
	when
		Pytanie(odpowiedz == "New magic and ghostly intrigue")
	then
		recommend( frame, kcontext.getKieRuntime(),"A Stranger in Olondria (Olondria) by Sofia Samatar" );
end
rule "Recommend: A Little Hatred"
	when
		Pytanie(odpowiedz == "Magic giving way to machines")
	then
		recommend( frame, kcontext.getKieRuntime(),"A Little Hatred (The Age of Madness, #1) by Joe Abercrombie" );
end

rule "Fairy Tale Fork : No New World Fork"
	when
		Pytanie(trescPytania == "Society on the brink of change?", odpowiedz == "No, not that gritty")
	then
		ArrayList<String> odp = new ArrayList<String>();
        odp.add("The Gods");
        odp.add("The People");
        Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Who's running the show?", odp );
        insert(p);
end

rule "No New World Fork : The Gods running show"
	when
		Pytanie(trescPytania == "Who's running the show?", odpowiedz == "The Gods")
	then
		ArrayList<String> odp = new ArrayList<String>();
        odp.add("Gods cohabiting hosts");
        odp.add("Overthrowing gods");
        odp.add("Gods among us");
        Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"How are the gods involved?", odp );
        insert(p);
end

rule "Recommend: The Poppy War"
	when
		Pytanie(odpowiedz == "Gods cohabiting hosts")
	then
		recommend( frame, kcontext.getKieRuntime(),"The Poppy War (The Poppy War, #1) by R.F. Kuang" );
end

rule "Recommend: City of Stairs"
	when
		Pytanie(odpowiedz == "Overthrowing gods")
	then
		recommend( frame, kcontext.getKieRuntime(),"City of Stairs (The Divine City, #1) by Robert Jackson Benett" );
end

rule "The gods running show: Gods among us"
	when
		Pytanie(trescPytania == "How are the gods involved?", odpowiedz == "Gods among us")
	then
		ArrayList<String> odp = new ArrayList<String>();
        odp.add("The Odyssey from a goddess' point of view");
        odp.add("Creating an utopia");
        odp.add("With shapeshifters");
        Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Gods among us", odp );
        insert(p);
end

rule "Recommend: Circe"
	when
		Pytanie(odpowiedz == "The Odyssey from a goddess' point of view")
	then
		recommend( frame, kcontext.getKieRuntime(),"Circe by Madeline Miller" );
end

rule "Recommend: The Just City"
	when
		Pytanie(odpowiedz == "Creating an utopia")
	then
		recommend( frame, kcontext.getKieRuntime(),"The Just City (Thessaly, #1) by Jo Walton" );
end

rule "Recommend: Black Leopard"
	when
		Pytanie(odpowiedz == "With shapeshifters")
	then
		recommend( frame, kcontext.getKieRuntime(),"Black Leopard, Red Wolf (The Dark Star Trilogy, #1) by Marlon James" );
end

rule "No New World Fork : The People running show"
	when
		Pytanie(trescPytania == "Who's running the show?", odpowiedz == "The People")
	then
		ArrayList<String> odp = new ArrayList<String>();
        odp.add("To a time in the past");
        odp.add("With magical borders");
        odp.add("Kids with PTSD from Narnia");
        Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Want to travel somewhere?", odp );
        insert(p);
end

rule "Recommend: Every Heart a Doorway"
	when
		Pytanie(odpowiedz == "Kids with PTSD from Narnia")
	then
		recommend( frame, kcontext.getKieRuntime(),"Every Heart A Doorway (Wayward Choldren, #1) by Seanan McGuire" );
end

rule "The People running show : Travel somewhere"
	when
		Pytanie(trescPytania == "Want to travel somewhere?", odpowiedz == "To a time in the past")
	then
		ArrayList<String> odp = new ArrayList<String>();
        odp.add("Egypt steeped in magic");
        odp.add("With a magic swindler");
        odp.add("With a magic mapmaker");
        Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"To a time in the past?", odp );
        insert(p);
end

rule "Recommend: A Master of Djinn"
	when
		Pytanie(odpowiedz == "Egypt steeped in magic")
	then
		recommend( frame, kcontext.getKieRuntime(),"A Master of Djinn (Dead Djinn Universe, #1) by P. Djeli Clark" );
end

rule "Recommend: The City of Brass"
	when
		Pytanie(odpowiedz == "With a magic swindler")
	then
		recommend( frame, kcontext.getKieRuntime(),"The City of Brass (The Daevabad Trilogy, #1) by S.A.Chakraborty" );
end

rule "Recommend: The Bird King"
	when
		Pytanie(odpowiedz == "With a magic mapmaker")
	then
		recommend( frame, kcontext.getKieRuntime(),"The Bird King by G. Willow Wilson" );
end

rule "Travel somewhere : with magical borders"
	when
		Pytanie(trescPytania == "Want to travel somewhere?", odpowiedz == "With magical borders")
	then
		ArrayList<String> odp = new ArrayList<String>();
        odp.add("Perhaps?");
        odp.add("Yes, bring on a new world");
        Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"With magical borders?", odp );
        insert(p);
end

rule "Recommend: Piranesi"
	when
		Pytanie(odpowiedz == "Perhaps?")
	then
		recommend( frame, kcontext.getKieRuntime(),"Piranesi by Susanna Clarke" );
end

rule "The People running show : Travel somewhere2"
	when
		Pytanie(trescPytania == "With magical borders?", odpowiedz == "Yes, bring on a new world")
	then
		ArrayList<String> odp = new ArrayList<String>();
        odp.add("To other Earths");
        odp.add("Find why magic dried up");
        odp.add("A magical New York City");
        Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Where to?", odp );
        insert(p);
end

rule "Recommend: A Dark Shade of Magic"
	when
		Pytanie(odpowiedz == "To other Earths")
	then
		recommend( frame, kcontext.getKieRuntime(),"A Darker Shade of Magic (Shades of Magic, #1) by V.E. Schwab" );
end

rule "Recommend: Sorcerer to the Crown"
	when
		Pytanie(odpowiedz == "Find why magic dried up")
	then
		recommend( frame, kcontext.getKieRuntime(),"Sorcerer to the Crown (Sorcerer Royal, #1) by Zen Cho" );
end

rule "Recommend: The Changeling"
	when
		Pytanie(odpowiedz == "A magical New York City")
	then
		recommend( frame, kcontext.getKieRuntime(),"The Changeling by Victor LaValle" );
end

rule "A little bit of both fork"
	when
		Pytanie(trescPytania == "Which type of book are you looking for?", odpowiedz == "A little bit of both")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("Alternative history");
		odp.add("A bit of horror please");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"A little bit of both?", odp );
		insert(p);
end

rule "A bit of horror please fork"
	when
		Pytanie(trescPytania == "A little bit of both?", odpowiedz == "A bit of horror please")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("Dark and ominous");
		odp.add("Religious horror in space");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"A bit of horror please?", odp );
		insert(p);
end

rule "Recommend: Mexican Gothic"
	when
		Pytanie(odpowiedz == "Dark and ominous")
	then
		recommend( frame, kcontext.getKieRuntime(), "Mexican Gothic by Sylvia Morendo-Garcia" );
end

rule "Recommend: Gideon The Ninth"
	when
		Pytanie(odpowiedz == "Religious horror in space")
	then
		recommend( frame, kcontext.getKieRuntime(), "Gideon The Ninth (The Locked Tomb, #1) by Tamsyn Muir");
end

rule "Alternative history fork"
	when
		Pytanie(trescPytania == "A little bit of both?", odpowiedz == "Alternative history")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("In the past");
		odp.add("In the present");
		odp.add("In the future");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Alternative history?", odp );
		insert(p);
end

rule "Recommend: In the past"
	when
		Pytanie(odpowiedz == "In the past")
	then
		recommend( frame, kcontext.getKieRuntime(), "The Calculating Stars (Lady Astronaut Universe, #1) by Mary Robinette Kowal" );
end

rule "Alternative history fork : In the present"
	when
		Pytanie(trescPytania == "Alternative history?", odpowiedz == "In the present")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("No");
		odp.add("Yes");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Too soon for a pandemic?", odp );
		insert(p);
end

rule "Recommend: In the present : No"
	when
		Pytanie(trescPytania == "Too soon for a pandemic?", odpowiedz == "No")
	then
		recommend( frame, kcontext.getKieRuntime(),"Station Eleven by Emily St. John Mandel" );
end

rule "In the present : Pandemic : Yes"
	when
		Pytanie(trescPytania == "Too soon for a pandemic?", odpowiedz == "Yes")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("Escape political unrest");
		odp.add("Start a revolution");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Which would you rather do:", odp );
		insert(p);
end

rule "Recommend: In the present : On Fragile Waves"
	when
		Pytanie(odpowiedz == "Escape political unrest")
	then
		recommend( frame, kcontext.getKieRuntime(),"On Fragile Waves by E. Lily Yu" );
end

rule "Recommend: In the present : Riot Baby"
	when
		Pytanie(odpowiedz == "Start a revolution")
	then
		recommend( frame, kcontext.getKieRuntime(),"Riot Baby by Tochi Onyebuchi" );
end

rule "Alternative history fork : In the future"
	when
		Pytanie(trescPytania == "Alternative history?", odpowiedz == "In the future")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("Fighting imperialism");
		odp.add("Climate change is our real foe");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"In the future?", odp );
		insert(p);
end

rule "Recommend: In the future : The Traitor Baru"
	when
		Pytanie(odpowiedz == "Fighting imperialism")
	then
		recommend( frame, kcontext.getKieRuntime(),"The Traitor Baru Cormorant (The Masquerade, #1) by Seth Dickinson" );
end

rule "Recommend: In the future : American War"
	when
		Pytanie(odpowiedz == "Climate change is our real foe" )
	then
		recommend( frame, kcontext.getKieRuntime(), "American War by Omar El Akkad");
end

rule "Sci-Fi fork"
	when
		Pytanie(trescPytania == "Which type of book are you looking for?", odpowiedz == "Sci-Fi")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("No. Let's stay on Earth");
		odp.add("Yes. Other planets it is.");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Want to travel to other planets?", odp );
		insert(p);
end

rule "Sci-Fi: On Earth"
	when
		Pytanie(trescPytania == "Want to travel to other planets?", odpowiedz == "No. Let's stay on Earth")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("Bring on the future");
		odp.add("Focus on today");
		odp.add("Why not both?");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Today, or an ultra-modern future?", odp );
		insert(p);
end

rule "Recommend: In the future : Exhalation"
	when
		Pytanie(odpowiedz == "Why not both?")
	then
		recommend( frame, kcontext.getKieRuntime(),"Exhalation by Ted Chiang" );
end

rule "Sci-Fi: Focus on today"
	when
		Pytanie(trescPytania == "Today, or an ultra-modern future?", odpowiedz == "Focus on today")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("The ethics of cloning");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Focus on today", odp );
		insert(p);
end

rule "Recommend: Focus on today : The Echo Wife"
	when
		Pytanie(odpowiedz == "The ethics of cloning")
	then
		recommend( frame, kcontext.getKieRuntime(),"The Echo Wife by Sarah Gailey" );
end

rule "Sci-Fi: Bring on the future"
	when
		Pytanie(trescPytania == "Today, or an ultra-modern future?", odpowiedz == "Bring on the future")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("Where humans escape");
		odp.add("Where humanity is struggling");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Bring on the future", odp );
		insert(p);
end

rule "Sci-Fi: Bring on the future : where humanity is struggling"
	when
		Pytanie(trescPytania == "Bring on the future", odpowiedz == "Where humanity is struggling")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("And we're ready to rebuild");
		odp.add("And we've become refugees");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Where humanity is struggling", odp );
		insert(p);
end

rule "Recommend: Annihilation"
	when
		Pytanie(odpowiedz == "And we're ready to rebuild")
	then
		recommend( frame, kcontext.getKieRuntime(),"Annihilation (Southern Reach, #1) by Jeff VanderMeer" );
end

rule "Recommend: Rosewater"
	when
		Pytanie(odpowiedz == "And we've become refugees")
	then
		recommend( frame, kcontext.getKieRuntime(),"Rosewater (The Wormwood Trilogy, #1) by Tade Thompson" );
end

rule "Sci-Fi: Bring on the future : Where humans escape"
	when
		Pytanie(trescPytania == "Bring on the future", odpowiedz == "Where humans escape")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("Through the multiverse");
		odp.add("To where time travel is weaponized");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Where humans escape", odp );
		insert(p);
end

rule "Recommend: The Space Between Worlds"
	when
		Pytanie(odpowiedz == "Through the multiverse")
	then
		recommend( frame, kcontext.getKieRuntime(),"The Space Between Worlds by Michael Johnson" );
end

rule "Recommend: This is How You Lose the Time"
	when
		Pytanie(odpowiedz == "To where time travel is weaponized")
	then
		recommend( frame, kcontext.getKieRuntime(),"This Is How You Lose the Time War by Amal El-Mohtar and max Gladstone" );
end

rule "Sci-Fi: Other planets"
	when
		Pytanie(trescPytania == "Want to travel to other planets?", odpowiedz == "Yes. Other planets it is.")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("Let's start closer to home");
		odp.add("Let's go to another galaxy");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Yes. Other planets it is.", odp );
		insert(p);
end

rule "Sci-Fi: Closer to home"
	when
		Pytanie(trescPytania == "Yes. Other planets it is.", odpowiedz == "Let's start closer to home")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("Let the action come to us");
		odp.add("And see where adventure leads");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Let's start closer to home", odp );
		insert(p);
end

rule "Sci-Fi: action come to us"
	when
		Pytanie(trescPytania == "Let's start closer to home", odpowiedz == "Let the action come to us")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("A brewing war with alien tech");
		odp.add("A documentary about a colony's last survivor");
		odp.add("First contact through a VR game");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Which do you prefer?", odp );
		insert(p);
end

rule "Recommend: Leviathan wakes"
	when
		Pytanie(odpowiedz == "A brewing war with alien tech")
	then
		recommend( frame, kcontext.getKieRuntime(),"Leviathan Wakes (The Expanse, #1) by James S.A. Corey" );
end

rule "Recommend: Radiance"
	when
		Pytanie(odpowiedz == "A documentary about a colony's last survivor")
	then
		recommend( frame, kcontext.getKieRuntime(),"Radiance by M. Valente" );
end

rule "Recommend: The Three-Body Problem"
	when
		Pytanie(odpowiedz == "First contact through a VR game")
	then
		recommend( frame, kcontext.getKieRuntime(),"The Three-Body Problem (Remembrance of Earth's Past, #1) by Cixin Liu" );
end

rule "Sci-Fi: And see where adventure leads"
	when
		Pytanie(trescPytania == "Let's start closer to home", odpowiedz == "And see where adventure leads")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("To science some $h1t");
		odp.add("To find a new home");
		odp.add("To explore strange new worlds seek out new life, and new civilizations");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"And see where adventure leads", odp );
		insert(p);
end

rule "Recommend: The Martian"
	when
		Pytanie(odpowiedz == "To science some $h1t")
	then
		recommend( frame, kcontext.getKieRuntime(),"The Martian by Andy Weir" );
end


rule "Recommend: The Long Way"
	when
		Pytanie(odpowiedz == "To explore strange new worlds seek out new life, and new civilizations")
	then
		recommend( frame, kcontext.getKieRuntime(),"The Long Way To A Small Angry Planet (Wayfarers, #1) by Becky Chambers" );
end

rule "Sci-Fi: To find a new home"
	when
		Pytanie(trescPytania == "And see where adventure leads", odpowiedz == "To find a new home")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("Using a changing extradimensional field");
		odp.add("On a generational ship with a racial divide");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"To find a new home", odp );
		insert(p);
end

rule "Recommend: The Collapsing Empire"
	when
		Pytanie(odpowiedz == "Using a changing extradimensional field")
	then
		recommend( frame, kcontext.getKieRuntime(),"The Collapsing Empire (The Interdependency, #1) by John Scalzi" );
end

rule "Recommend: An Unkindness of Ghosts"
	when
		Pytanie(odpowiedz == "On a generational ship with a racial divide")
	then
		recommend( frame, kcontext.getKieRuntime(),"An Unkindness of Ghosts by Rivers Solomon" );
end

rule "Sci-Fi: go to another galaxy "
	when
		Pytanie(trescPytania == "Yes. Other planets it is.", odpowiedz == "Let's go to another galaxy")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("To explore");
		odp.add("To settle down");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"Let's go to another galaxy", odp );
		insert(p);
end

rule "Sci-Fi: To explore"
	when
		Pytanie(trescPytania == "Let's go to another galaxy", odpowiedz == "To explore")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("With Ancient AIs");
		odp.add("The nature of reality");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"To explore", odp );
		insert(p);
end

rule "Recommend: Ninefox Gambit"
	when
		Pytanie(odpowiedz == "The nature of reality")
	then
		recommend( frame, kcontext.getKieRuntime(),"Ninefox Gambit (The Machineries of Empire, #1) by Yoon Ha Lee" );
end

rule "Sci-Fi: With Ancient AIs"
	when
		Pytanie(trescPytania == "To explore", odpowiedz == "With Ancient AIs")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("Addicted to TV shows");
		odp.add("With a hive mind");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"With Ancient AIs", odp );
		insert(p);
end

rule "Recommend: All systems Red"
	when
		Pytanie(odpowiedz == "Addicted to TV shows")
	then
		recommend( frame, kcontext.getKieRuntime(),"All systems Red (The Murderbot Diaries, #1) by Martha Wells" );
end

rule "Recommend: Ancillary Justice"
	when
		Pytanie(odpowiedz == "With a hive mind")
	then
		recommend( frame, kcontext.getKieRuntime(),"Ancillary Justice (Imperial Radch, #1) by Ann Leckie" );
end

rule "Sci-Fi: To settle down"
	when
		Pytanie(trescPytania == "Let's go to another galaxy", odpowiedz == "To settle down")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("At the finest off-world university");
		odp.add("On another planet ruled by...");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"To settle down", odp );
		insert(p);
end

rule "Recommend: Binti"
	when
		Pytanie(odpowiedz == "At the finest off-world university")
	then
		recommend( frame, kcontext.getKieRuntime(),"Binti (Binti, #1) by Nnedi Okorator" );
end

rule "Sci-Fi: On another planet ruled by"
	when
		Pytanie(trescPytania == "To settle down", odpowiedz == "On another planet ruled by...")
	then
		ArrayList<String> odp = new ArrayList<String>();
		odp.add("Empires inspired by the past");
		odp.add("Intelligent spiders uplifted by science");
		Pytanie p = zapytaj( frame, kcontext.getKieRuntime(),"On another planet ruled by...", odp );
		insert(p);
end

rule "Recommend: A Memory Called Empire"
	when
		Pytanie(odpowiedz == "Empires inspired by the past")
	then
		recommend( frame, kcontext.getKieRuntime(),"A Memory Called Empire (Teixcalaan, #1) by Arkady Martine" );
end

rule "Recommend: Children of Time"
	when
		Pytanie(odpowiedz == "Intelligent spiders uplifted by science")
	then
		recommend( frame, kcontext.getKieRuntime(),"Children of Time (Children of Time, #1) by Adrian Tchaikovsky" );
end

function void recommend(JFrame frame, KieRuntime krt, String title) {
	final JPanel panel = new JPanel();
	panel.add( new JLabel(title) );
	JOptionPane.showMessageDialog(frame, panel);
}

function Pytanie zapytaj(JFrame frame, KieRuntime krt, String question, ArrayList answers) {

    class Listener implements ItemListener {
        public Pytanie answers;
        public String chosen;
        public Listener(Pytanie answer, String chosen) {
            this.answers = answer;
            this.chosen = chosen;
        }

        @Override
        public void itemStateChanged(ItemEvent event) {
            if (event.getStateChange() == ItemEvent.SELECTED) {
                answers.setOdpowiedz(chosen);
            }
        }
    }
    Pytanie response = new Pytanie(question, answers.get(0).toString());

    final JPanel panel = new JPanel(new GridLayout(0, 1));
    panel.add(new JLabel(question));

    ArrayList<JRadioButton> buttons = new ArrayList<>();

    for (int i = 0; i < answers.size(); i++) {
        String text = answers.get(i).toString();
        JRadioButton radioButton = new JRadioButton(text);
        Listener newListener = new Listener(response, text);
        radioButton.addItemListener(newListener);
        buttons.add(radioButton);
    }

    buttons.get(0).setSelected(true);
    response.setOdpowiedz(answers.get(0).toString());

    ButtonGroup group = new ButtonGroup();

    for (int i = 0; i < buttons.size(); i++) {
        group.add(buttons.get(i));
        panel.add(buttons.get(i));
    }

    if (JOptionPane.showConfirmDialog(frame, panel, "Question", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE) < 0) {
        response.setOdpowiedz("Exit program");
    }

    return response;
}